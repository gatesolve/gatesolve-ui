{"version":3,"sources":["serviceWorkerRegistration.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","App","React","lazy","ReactDOM","render","StrictMode","dense","maxSnack","fallback","style","width","height","position","textAlign","backgroundColor","display","alignItems","fontSize","color","margin","justifyContent","CircularProgress","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"4MAAMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DA2CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,WCjF3DC,EAAMC,IAAMC,MAChB,kBACE,uDAOJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAkBC,OAAK,EAACC,SAAU,EAAlC,SACE,cAAC,WAAD,CACEC,SACE,sBACEC,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,SAAU,QACVC,UAAW,UALf,UAQE,wBACEJ,MAAO,CACLK,gBAAiB,UACjBC,QAAS,OACTC,WAAY,SACZC,SAAU,qBACVC,MAAO,QACPP,OAAQ,OAPZ,SAUE,oBACEF,MAAO,CACLU,OAAQ,YACRF,SAAU,OAHd,yBASF,qBACER,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRI,QAAS,OACTC,WAAY,SACZI,eAAgB,UANpB,SASE,cAACC,EAAA,EAAD,SAtCR,SA2CE,cAACrB,EAAD,YAKRsB,SAASC,eAAe,SDtDnB,SAAkBzC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyC,IAAIC,GAAwBjD,OAAOC,SAASiD,MACpDC,SAAWnD,OAAOC,SAASkD,OAIvC,OAGFnD,OAAOoD,iBAAiB,QAAQ,WAC9B,IAAM/C,EAAK,UAAM4C,GAAN,sBAEPnD,IAgEV,SAAiCO,EAAeC,GAE9C+C,MAAMhD,EAAO,CACXiD,QAAS,CAAE,iBAAkB,YAE5B5C,MAAK,SAAC6C,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpD,UAAUC,cAAcoD,MAAMlD,MAAK,SAACC,GAClCA,EAAakD,aAAanD,MAAK,WAC7BV,OAAOC,SAAS6D,eAKpB1D,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA4C,CAAwB1D,EAAOC,GAI/BC,UAAUC,cAAcoD,MAAMlD,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC6B/B0D,K","file":"static/js/main.9b0c6344.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport \"./index.css\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nconst App = React.lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"App\" */\n      /* webpackPreload: true */\n      \"./App\"\n    )\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <SnackbarProvider dense maxSnack={3}>\n        <Suspense\n          fallback={\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                position: \"fixed\",\n                textAlign: \"center\",\n              }}\n            >\n              <header\n                style={{\n                  backgroundColor: \"#282c34\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  fontSize: \"calc(10px + 2vmin)\",\n                  color: \"white\",\n                  height: \"10%\",\n                }}\n              >\n                <h2\n                  style={{\n                    margin: \"1.5vh 2vh\",\n                    fontSize: \"4vh\",\n                  }}\n                >\n                  Gatesolve\n                </h2>\n              </header>\n              <div\n                style={{\n                  width: \"100%\",\n                  height: \"100%\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <CircularProgress />\n              </div>\n            </div>\n          }\n        >\n          <App />\n        </Suspense>\n      </SnackbarProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}